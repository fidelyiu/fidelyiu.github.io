import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.CHbYRmlO.js";const o=JSON.parse('{"title":"是否存在一个节点","description":"","frontmatter":{"title":"是否存在一个节点"},"headers":[],"relativePath":"tool/has/has-by-search/index.md","filePath":"tool/has/has-by-search/index.md","lastUpdated":1729688185000}'),h={name:"tool/has/has-by-search/index.md"};function t(e,s,p,k,d,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="是否存在一个节点" tabindex="-1">是否存在一个节点 <a class="header-anchor" href="#是否存在一个节点" aria-label="Permalink to &quot;是否存在一个节点&quot;">​</a></h1><h2 id="方法使用" tabindex="-1">方法使用 <a class="header-anchor" href="#方法使用" aria-label="Permalink to &quot;方法使用&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { hasBySearch } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;yiu-tree&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, children: [{ id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-1-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-1-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }] },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, children: [{ id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }] },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hasBySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`是否存在节点 :&gt;&gt; \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="方法说明" tabindex="-1">方法说明 <a class="header-anchor" href="#方法说明" aria-label="Permalink to &quot;方法说明&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>hasBySearch(tree, searchFunc, [opt])</span></span></code></pre></div><p>方法默认关闭深拷贝。</p><p>根据搜索方法在树中查询一个节点，如果存在该节点，那么立马返回<code>true</code>。</p><ul><li><code>NodeType</code>: <code>T</code></li><li><code>hasBySearch&lt;T&gt;</code>: 泛型支持传入你定义的节点类型</li><li><code>tree</code>: <ul><li>类型: <code>T[]</code></li><li>说明: 传入的树数据</li></ul></li><li><code>searchFunc</code>: <ul><li>类型: <code>(node: T, [nodeInfo: TreeNodeInfo&lt;T&gt;]) =&gt; boolean</code></li><li>说明: 搜索函数</li></ul></li><li><code>opt</code>: <ul><li>类型: <code>TreeBaseOpt&lt;T&gt;</code></li><li>说明: 树配置</li></ul></li></ul>`,8)]))}const c=i(h,[["render",t]]);export{o as __pageData,c as default};
