import{_ as t,c as i,o as e,ae as a}from"./chunks/framework.CHbYRmlO.js";const o=JSON.parse('{"title":"根据条件搜索树","description":"","frontmatter":{"title":"根据条件搜索树"},"headers":[],"relativePath":"tool/get/get-filter-by-search/index.md","filePath":"tool/get/get-filter-by-search/index.md","lastUpdated":1729688185000}'),l={name:"tool/get/get-filter-by-search/index.md"};function n(h,s,d,p,k,r){return e(),i("div",null,s[0]||(s[0]=[a(`<h1 id="根据条件搜索树" tabindex="-1">根据条件搜索树 <a class="header-anchor" href="#根据条件搜索树" aria-label="Permalink to &quot;根据条件搜索树&quot;">​</a></h1><h2 id="方法使用" tabindex="-1">方法使用 <a class="header-anchor" href="#方法使用" aria-label="Permalink to &quot;方法使用&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getFilterBySearch } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;yiu-tree&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, children: [{ id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-1-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-1-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }] },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, children: [{ id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }] },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getFilterBySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`过滤结果 :&gt;&gt; \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="方法描述" tabindex="-1">方法描述 <a class="header-anchor" href="#方法描述" aria-label="Permalink to &quot;方法描述&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>getFilterBySearch(tree, searchFunc, [opt])</span></span></code></pre></div><p>方法默认开启深拷贝。</p><p>根据传入的搜索方法返回负荷条件的树。</p><ul><li><code>NodeType</code>: <code>T</code></li><li><code>getFilterBySearch&lt;T&gt;</code>: 泛型支持传入你定义的节点类型</li><li><code>tree</code>: <ul><li>类型: <code>T[]</code></li><li>说明: 传入的树数据</li></ul></li><li><code>searchFunc</code>: <ul><li>类型: <code>(node: T, [nodeInfo: TreeNodeInfo&lt;T&gt;]) =&gt; boolean</code></li><li>说明: 搜索函数</li></ul></li><li><code>opt</code>: <ul><li>类型: <code>TreeFilterOpt&lt;T&gt;</code></li><li>说明: 过滤配置</li></ul></li></ul><h2 id="配置说明" tabindex="-1">配置说明 <a class="header-anchor" href="#配置说明" aria-label="Permalink to &quot;配置说明&quot;">​</a></h2><p>在<code>TreeFilterOpt</code>中有两项配置对于过滤来说很重要：</p><table tabindex="0"><thead><tr><th style="text-align:center;">参数名称</th><th style="text-align:center;">类型</th><th style="text-align:center;">默认值</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>parentMatch</code></td><td style="text-align:center;"><code>boolean</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;">父节点是否需要匹配</td></tr><tr><td style="text-align:center;"><code>childrenMatch</code></td><td style="text-align:center;"><code>boolean</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;">子节点是否需要匹配</td></tr></tbody></table><p>二者搭配出来的过滤效果如下：</p><table tabindex="0"><thead><tr><th style="text-align:center;"><code>parentMatch</code></th><th style="text-align:center;"><code>childrenMatch</code></th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;">当一个节点匹配搜索函数后，将忽略其父节点、子节点、子孙节点的匹配结果</td></tr><tr><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;">当一个节点匹配搜索函数后，将忽略其父节点的匹配结果</td></tr><tr><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;">所有节点都会进行函数匹配</td></tr><tr><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;">当一个节点匹配搜索函数后，其所有子节点、子孙节点都会匹配</td></tr></tbody></table>`,13)]))}const E=t(l,[["render",n]]);export{o as __pageData,E as default};
