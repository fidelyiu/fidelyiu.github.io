import{_ as a,c as i,o as e,ae as t}from"./chunks/framework.CHbYRmlO.js";const c=JSON.parse('{"title":"实践&建议","description":"","frontmatter":{"title":"实践&建议"},"headers":[],"relativePath":"practice/index.md","filePath":"practice/index.md","lastUpdated":1729688185000}'),n={name:"practice/index.md"};function h(l,s,p,r,d,k){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="实践-建议" tabindex="-1">实践&amp;建议 <a class="header-anchor" href="#实践-建议" aria-label="Permalink to &quot;实践&amp;建议&quot;">​</a></h1><h2 id="节点" tabindex="-1">节点 <a class="header-anchor" href="#节点" aria-label="Permalink to &quot;节点&quot;">​</a></h2><p>节点尽量简单，不要有<strong>循环引用</strong>，否则可能存在死循环问题。</p><h2 id="深拷贝" tabindex="-1">深拷贝 <a class="header-anchor" href="#深拷贝" aria-label="Permalink to &quot;深拷贝&quot;">​</a></h2><p><code>YiuTree</code>的深拷贝默认使用<code>JSON.parse(JSON.stringify(treeData))</code>，如果这不满足你的要求，你可以使用<code>TreeBaseOpt.deepClone</code>或<code>TreeBaseOpt.deepCloneFunc</code>进行修改。</p><h3 id="禁用深拷贝" tabindex="-1">禁用深拷贝 <a class="header-anchor" href="#禁用深拷贝" aria-label="Permalink to &quot;禁用深拷贝&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getFilterBySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([], () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { deepClone: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><h3 id="替换深拷贝方法" tabindex="-1">替换深拷贝方法 <a class="header-anchor" href="#替换深拷贝方法" aria-label="Permalink to &quot;替换深拷贝方法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { cloneDeep } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lodash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getFilterBySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([], () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { deepCloneFunc: cloneDeep });</span></span></code></pre></div>`,9)]))}const g=a(n,[["render",h]]);export{c as __pageData,g as default};
