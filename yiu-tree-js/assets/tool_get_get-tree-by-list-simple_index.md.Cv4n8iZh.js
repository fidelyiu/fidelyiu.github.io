import{_ as i,c as a,o as t,ae as n}from"./chunks/framework.CHbYRmlO.js";const o=JSON.parse('{"title":"简单数组构造树","description":"","frontmatter":{"title":"简单数组构造树"},"headers":[],"relativePath":"tool/get/get-tree-by-list-simple/index.md","filePath":"tool/get/get-tree-by-list-simple/index.md","lastUpdated":1729688185000}'),l={name:"tool/get/get-tree-by-list-simple/index.md"};function e(p,s,h,k,d,E){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="简单数组构造树" tabindex="-1">简单数组构造树 <a class="header-anchor" href="#简单数组构造树" aria-label="Permalink to &quot;简单数组构造树&quot;">​</a></h1><h2 id="方法使用" tabindex="-1">方法使用 <a class="header-anchor" href="#方法使用" aria-label="Permalink to &quot;方法使用&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getTreeByListSimple } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;yiu-tree&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nodeList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pid: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-1-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pid: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-1-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pid: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pid: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1-3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pid: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pid: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getTreeByListSimple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nodeList);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`构造的树 :&gt;&gt; \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="方法说明" tabindex="-1">方法说明 <a class="header-anchor" href="#方法说明" aria-label="Permalink to &quot;方法说明&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>getTreeByListSimple(nodeList, [opt])</span></span></code></pre></div><p>方法默认开启深拷贝。</p><p>简单的从数组中构造树，构造的依据是节点的<code>pid</code>，如果定义的<code>pid</code>在数组找不到父节点，那么这个节点将会被抛弃，根节点的<code>pid</code>一定不能设置。</p><p>该方法性能比<code>getTreeByList</code>高。</p><ul><li><code>NodeType</code>: <code>T</code></li><li><code>getTreeByListSimple&lt;T&gt;</code>: 泛型支持传入你定义的节点类型</li><li><code>nodeList</code>: <ul><li>类型: <code>T[]</code></li><li>说明: 传入的树数据</li></ul></li><li><code>opt</code>: <ul><li>类型: <code>TreeBaseOpt&lt;T&gt;</code></li><li>说明: 树配置</li></ul></li></ul><h2 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h2><p>因为这个算法是变量两遍数组，然后在过滤出没有<code>pid</code>的节点。</p><p>所以务必确保根节点的<code>pid</code>一定要是判断为<code>false</code>的值，比如<code>&#39;&#39;</code>。</p><p>否则的话，最后一步过滤将会少数据。</p>`,13)]))}const g=i(l,[["render",e]]);export{o as __pageData,g as default};
